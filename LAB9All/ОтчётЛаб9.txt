Задание 1.
Создайте структуру для хранения дробей и компрексных чисел используя
вложенность. Структура должна иметь 2 члена: целочисленный числитель и
целочисленный знаменатель. Объявите 2 дробные переменные и получите их
значения от пользователя. Напишите функцию multiply, параметрами будут
указатели на *void (для этих две переменные), которая будет умножать эти числа на
целую часть и дробную часть вводимую пользователем, и выводить результат
вычисления одним вещественным числом. Тоже самое реализуйте с комплексным
числом. Функция multiply должна быть перегружена (для переменных дроби и
комплексных переменных).

#include <iostream>
#include <iomanip>

using namespace std;

struct Fraction
{
    int numerator;
    int denominator;
};

Fraction GetFraction()
{
    Fraction fract;
    cout << "Введите числитель: ";
    cin >> fract.numerator;
    cout << "Введите знаменатель: ";
    cin >> fract.denominator;
    cout << "--------------------" << endl;
    return fract;
}

double Multiply(Fraction first, Fraction second)
{
    double res;
    res = (double)((first.numerator * second.numerator) / (first.denominator * second.denominator));
    return res;

}

int main()
{
    Fraction first = GetFraction();
    Fraction second = GetFraction();
    double res = Multiply(first, second);
    cout << "Результат деление дроби " << first.numerator << "/" << first.denominator <<
            " на " << second.numerator << "/" << second.denominator << " = " << res << endl;
}

Задание 2.
Создайте программу «Новый вид», есть структура количество и типы голов
существа, количество лап существа, покров тела существа(красная шерсть, черная
чешуя и тд), типы хвостов, типы и количество глаз. Пользователю выводится
сообщение побыть создателем и ввести рандомную последовательность которую
от него просят, после чего выводится а выводится «Новый вид» существа который
вы создали. Использовать структуры данных.

#include <iostream>
#include <iomanip>
#include <time.h>

using namespace std;
int main()
{
    struct AnimalKind
    {
        string headType;
        int legsCount;
        string bodyCover; //Красная шерсть, черная шерсть, чешуя  и тд
        string tailType;
        string eyesType;
        int eyesCount;
    };

    AnimalKind newAnimal;

    cout << "Введите тип головы: ";
    cin >> newAnimal.headType;
    cout << "Введите кол-во ног: ";
    cin >> newAnimal.legsCount;
    cout << "Введите покров тела: ";
    cin >> newAnimal.bodyCover;
    cout << "Введите тип хвоста: ";
    cin >> newAnimal.tailType;
    cout << "Введите тип глаз: ";
    cin >> newAnimal.eyesType;
    cout << "Введите кол-во глаз: ";
    cin >> newAnimal.eyesCount;

    cout << "Ваше существо имеет голову \"" << newAnimal.headType << "\" у которого кол-во ног: "
         << newAnimal.legsCount << "\nи имеет покров тела \"" << newAnimal.bodyCover
         << "\" с типом хвоста \"" << newAnimal.tailType << "\", глаза у него \"" << newAnimal.eyesType
         << "\", а их количество " << newAnimal.eyesCount;

}

Задание 3.
Создайте структуру данных материк, страны/государства, столицы, область/регион,
города. То есть пользователь вводит город, в программе выводится область/регион
этого города, столица этого города, государство/страна этого города и материк этого
города. Инициализируйте структуру статически и динамически. Используйте
ссылку на структуру. Городов должно быть не менее 10, и некоторые города имеют
общие столицы или регионы или материк, однако имеются которые не имеют
общих пересечений. Если города нет в списке, выдать пользователю «Данная
информация отсутствует», и предложить повторить поиск или выйти по нажатию
«q».

#include <iostream>
#include <iomanip>
#include <conio.h>

using namespace std;

struct City {
    string name;
    string region;
    string capital;
    string country;
    string continent;
};

void PrintInfo(City city)
{
    cout << "Название города: " << city.name << endl;
    cout << "Название региона: " << city.region << endl;
    cout << "Столица города: " << city.capital << endl;
    cout << "Страна города: " << city.country << endl;
    cout << "Континент города: " << city.continent << endl;
}

int main()
{
    City cities[] = {
        {"Bratsk", "Irkutskaya oblast", "Moscow", "Russia", "Eurasia"},
        {"Irkutsk", "Irkutskaya oblast", "Moscow", "Russia", "Eurasia"},
        {"Moscow", "Moskovskaya oblast", "Moscow", "Russia", "Eurasia"},
        {"Novosibirsk", "Novosibirskaya oblast", "Moscow", "Russia", "Eurasia"},
        {"London", "Europe", "London", "United Kingdom", "Europe"},
        {"Wales", "Europe", "London", "United Kingdom", "Europe"},
        {"Paris", "Europe", "Paris", "France", "Europe"},
        {"Rome", "Europe", "Rome", "Italy", "Europe"},
        {"Berlin", "Europe", "Berlin", "Germany", "Europe"},
        {"Ankara", "Europe", "Ankara", "Turkey", "Europe"},
    };
    string cityName;
    bool find = false;
    func :
    cout << "Введите название города: ";
    cin >> cityName;
    for (auto city : cities)
    {
        if (city.name == cityName)
        {
            find = true;
            PrintInfo(city);
        }
    }
    if(!find)
    {
        cout << "Данная информация отсутствует" << endl;
        cout << "Вернуться к поиску?\nДа-q\tНет-e\n----";
        char button = getch();
        cout << '\n';
        if(button == 113)
            goto func;
    }
}


